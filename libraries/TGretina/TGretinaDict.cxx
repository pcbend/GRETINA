//
// File generated by rootcint at Wed Apr  1 13:22:27 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME TGretinaDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TGretinaDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TGretinaHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TGretinaHit(void *p = 0);
   static void *newArray_TGretinaHit(Long_t size, void *p);
   static void delete_TGretinaHit(void *p);
   static void deleteArray_TGretinaHit(void *p);
   static void destruct_TGretinaHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGretinaHit*)
   {
      ::TGretinaHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGretinaHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGretinaHit", ::TGretinaHit::Class_Version(), "/user/benderp/Programs/GRETINA/include/TGretinaHit.h", 13,
                  typeid(::TGretinaHit), DefineBehavior(ptr, ptr),
                  &::TGretinaHit::Dictionary, isa_proxy, 4,
                  sizeof(::TGretinaHit) );
      instance.SetNew(&new_TGretinaHit);
      instance.SetNewArray(&newArray_TGretinaHit);
      instance.SetDelete(&delete_TGretinaHit);
      instance.SetDeleteArray(&deleteArray_TGretinaHit);
      instance.SetDestructor(&destruct_TGretinaHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGretinaHit*)
   {
      return GenerateInitInstanceLocal((::TGretinaHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGretinaHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGretina_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TGretina(void *p = 0);
   static void *newArray_TGretina(Long_t size, void *p);
   static void delete_TGretina(void *p);
   static void deleteArray_TGretina(void *p);
   static void destruct_TGretina(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGretina*)
   {
      ::TGretina *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGretina >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGretina", ::TGretina::Class_Version(), "/user/benderp/Programs/GRETINA/include/TGretina.h", 11,
                  typeid(::TGretina), DefineBehavior(ptr, ptr),
                  &::TGretina::Dictionary, isa_proxy, 4,
                  sizeof(::TGretina) );
      instance.SetNew(&new_TGretina);
      instance.SetNewArray(&newArray_TGretina);
      instance.SetDelete(&delete_TGretina);
      instance.SetDeleteArray(&deleteArray_TGretina);
      instance.SetDestructor(&destruct_TGretina);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGretina*)
   {
      return GenerateInitInstanceLocal((::TGretina*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGretina*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TGretinaHit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGretinaHit::Class_Name()
{
   return "TGretinaHit";
}

//______________________________________________________________________________
const char *TGretinaHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGretinaHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGretinaHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGretinaHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGretinaHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGretinaHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGretinaHit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGretinaHit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGretina::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGretina::Class_Name()
{
   return "TGretina";
}

//______________________________________________________________________________
const char *TGretina::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGretina*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGretina::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGretina*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGretina::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGretina*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGretina::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGretina*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TGretinaHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGretinaHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGretinaHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGretinaHit::Class(),this);
   }
}

//______________________________________________________________________________
void TGretinaHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TGretinaHit.
      TClass *R__cl = ::TGretinaHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamp", &fTimeStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWalkCorrection", &fWalkCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCrystalId", &fCrystalId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoreEnergy", &fCoreEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoreCharge", &fCoreCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCorePosition", &fCorePosition);
      R__insp.InspectMember(fCorePosition, "fCorePosition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentTime", &fCurrentTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstInteraction", &fFirstInteraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSecondInteraction", &fSecondInteraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSegmentNumber", (void*)&fSegmentNumber);
      R__insp.InspectMember("vector<Int_t>", (void*)&fSegmentNumber, "fSegmentNumber.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInteractionPosition", (void*)&fInteractionPosition);
      R__insp.InspectMember("vector<TVector3>", (void*)&fInteractionPosition, "fInteractionPosition.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSegmentEnergy", (void*)&fSegmentEnergy);
      R__insp.InspectMember("vector<Float_t>", (void*)&fSegmentEnergy, "fSegmentEnergy.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGretinaHit(void *p) {
      return  p ? new(p) ::TGretinaHit : new ::TGretinaHit;
   }
   static void *newArray_TGretinaHit(Long_t nElements, void *p) {
      return p ? new(p) ::TGretinaHit[nElements] : new ::TGretinaHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGretinaHit(void *p) {
      delete ((::TGretinaHit*)p);
   }
   static void deleteArray_TGretinaHit(void *p) {
      delete [] ((::TGretinaHit*)p);
   }
   static void destruct_TGretinaHit(void *p) {
      typedef ::TGretinaHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGretinaHit

//______________________________________________________________________________
void TGretina::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGretina.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGretina::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGretina::Class(),this);
   }
}

//______________________________________________________________________________
void TGretina::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TGretina.
      TClass *R__cl = ::TGretina::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gretina_hits", (void*)&gretina_hits);
      R__insp.InspectMember("vector<TGretinaHit>", (void*)&gretina_hits, "gretina_hits.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "addback_hits", (void*)&addback_hits);
      R__insp.InspectMember("vector<TGretinaHit>", (void*)&addback_hits, "addback_hits.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGretina(void *p) {
      return  p ? new(p) ::TGretina : new ::TGretina;
   }
   static void *newArray_TGretina(Long_t nElements, void *p) {
      return p ? new(p) ::TGretina[nElements] : new ::TGretina[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGretina(void *p) {
      delete ((::TGretina*)p);
   }
   static void deleteArray_TGretina(void *p) {
      delete [] ((::TGretina*)p);
   }
   static void destruct_TGretina(void *p) {
      typedef ::TGretina current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGretina

namespace ROOT {
   void vectorlETGretinaHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETGretinaHitgR_Dictionary();
   static void *new_vectorlETGretinaHitgR(void *p = 0);
   static void *newArray_vectorlETGretinaHitgR(Long_t size, void *p);
   static void delete_vectorlETGretinaHitgR(void *p);
   static void deleteArray_vectorlETGretinaHitgR(void *p);
   static void destruct_vectorlETGretinaHitgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TGretinaHit>*)
   {
      vector<TGretinaHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TGretinaHit>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TGretinaHit>", -2, "/mnt/misc/sw/x86_64/Debian/7/root/gnu/5.34.14a/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TGretinaHit>), DefineBehavior(ptr, ptr),
                  0, &vectorlETGretinaHitgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<TGretinaHit>) );
      instance.SetNew(&new_vectorlETGretinaHitgR);
      instance.SetNewArray(&newArray_vectorlETGretinaHitgR);
      instance.SetDelete(&delete_vectorlETGretinaHitgR);
      instance.SetDeleteArray(&deleteArray_vectorlETGretinaHitgR);
      instance.SetDestructor(&destruct_vectorlETGretinaHitgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TGretinaHit> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TGretinaHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETGretinaHitgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TGretinaHit>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETGretinaHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TGretinaHit> : new vector<TGretinaHit>;
   }
   static void *newArray_vectorlETGretinaHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TGretinaHit>[nElements] : new vector<TGretinaHit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETGretinaHitgR(void *p) {
      delete ((vector<TGretinaHit>*)p);
   }
   static void deleteArray_vectorlETGretinaHitgR(void *p) {
      delete [] ((vector<TGretinaHit>*)p);
   }
   static void destruct_vectorlETGretinaHitgR(void *p) {
      typedef vector<TGretinaHit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TGretinaHit>

namespace ROOT {
   void vectorlETVector3gR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETVector3gR_Dictionary();
   static void *new_vectorlETVector3gR(void *p = 0);
   static void *newArray_vectorlETVector3gR(Long_t size, void *p);
   static void delete_vectorlETVector3gR(void *p);
   static void deleteArray_vectorlETVector3gR(void *p);
   static void destruct_vectorlETVector3gR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TVector3>*)
   {
      vector<TVector3> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TVector3>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TVector3>", -2, "/mnt/misc/sw/x86_64/Debian/7/root/gnu/5.34.14a/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TVector3>), DefineBehavior(ptr, ptr),
                  0, &vectorlETVector3gR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TVector3>) );
      instance.SetNew(&new_vectorlETVector3gR);
      instance.SetNewArray(&newArray_vectorlETVector3gR);
      instance.SetDelete(&delete_vectorlETVector3gR);
      instance.SetDeleteArray(&deleteArray_vectorlETVector3gR);
      instance.SetDestructor(&destruct_vectorlETVector3gR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TVector3> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TVector3>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETVector3gR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TVector3>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETVector3gR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TVector3> : new vector<TVector3>;
   }
   static void *newArray_vectorlETVector3gR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TVector3>[nElements] : new vector<TVector3>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETVector3gR(void *p) {
      delete ((vector<TVector3>*)p);
   }
   static void deleteArray_vectorlETVector3gR(void *p) {
      delete [] ((vector<TVector3>*)p);
   }
   static void destruct_vectorlETVector3gR(void *p) {
      typedef vector<TVector3> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TVector3>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/mnt/misc/sw/x86_64/Debian/7/root/gnu/5.34.14a/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* TGretinaDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTGretinaDict();

extern "C" void G__set_cpp_environmentTGretinaDict() {
  G__cpp_reset_tagtableTGretinaDict();
}
#include <new>
extern "C" int G__cpp_dllrevTGretinaDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TGretinaHit */
static int G__TGretinaDict_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGretinaHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGretinaHit[n];
     } else {
       p = new((void*) gvp) TGretinaHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGretinaHit;
     } else {
       p = new((void*) gvp) TGretinaHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGretinaHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGretinaHit(*(G2Fragment*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TGretinaHit(*(G2Fragment*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TGretinaHit*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TGretinaHit*) G__getstructoffset())->GetCrystalId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TGretinaHit*) G__getstructoffset())->GetCoreEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TGretinaHit*) G__getstructoffset())->GetCoreCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGretinaHit*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGretinaHit*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TGretinaHit*) G__getstructoffset())->Size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((TGretinaHit*) G__getstructoffset())->GetPosition();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TGretinaHit*) G__getstructoffset())->CheckPosition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TGretinaHit*) G__getstructoffset())->CheckAddback(*(TGretinaHit*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TGretinaHit& obj = ((TGretinaHit*) G__getstructoffset())->operator+=(*(TGretinaHit*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((TGretinaHit*) G__getstructoffset())->GetDoppler((double) G__double(libp->para[0]), (TVector3*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((TGretinaHit*) G__getstructoffset())->GetDoppler((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGretinaHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGretinaHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGretinaHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGretinaHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGretinaHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGretinaHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGretinaHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGretinaHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_232_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGretinaHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TGretinaDict_232_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGretinaHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGretinaHit(*(TGretinaHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGretinaHit G__TTGretinaHit;
static int G__TGretinaDict_232_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGretinaHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGretinaHit*) (soff+(sizeof(TGretinaHit)*i)))->~G__TTGretinaHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGretinaHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGretinaHit*) (soff))->~G__TTGretinaHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TGretinaDict_232_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGretinaHit* dest = (TGretinaHit*) G__getstructoffset();
   *dest = *(TGretinaHit*) libp->para[0].ref;
   const TGretinaHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGretina */
static int G__TGretinaDict_241_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGretina* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGretina[n];
     } else {
       p = new((void*) gvp) TGretina[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGretina;
     } else {
       p = new((void*) gvp) TGretina;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGretinaDictLN_TGretina));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGretina*) G__getstructoffset())->AddGretinaHit(*(TGretinaHit*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TGretina*) G__getstructoffset())->NumberOfGretinaHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGretina*) G__getstructoffset())->GetHit(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TGretina*) G__getstructoffset())->NumberOfAddbackHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGretina*) G__getstructoffset())->GetAddbackHit(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGretina*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGretina*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGretina*) G__getstructoffset())->BuildAddBack();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         TVector3* pobj;
         TVector3 xobj = TGretina::FindPosition((int) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         TVector3* pobj;
         TVector3 xobj = TGretina::FindPosition((int) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         TVector3* pobj;
         TVector3 xobj = TGretina::FindPosition((int) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         TVector3* pobj;
         TVector3 xobj = TGretina::FindPosition((int) G__int(libp->para[0]));
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGretina::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGretina::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGretina::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGretina::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGretina*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGretina::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGretina::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGretina::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_241_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGretina::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TGretinaDict_241_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGretina* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGretina(*(TGretina*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGretinaDictLN_TGretina));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGretina G__TTGretina;
static int G__TGretinaDict_241_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGretina*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGretina*) (soff+(sizeof(TGretina)*i)))->~G__TTGretina();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGretina*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGretina*) (soff))->~G__TTGretina();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TGretinaDict_241_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGretina* dest = (TGretina*) G__getstructoffset();
   *dest = *(TGretina*) libp->para[0].ref;
   const TGretina& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<TGretinaHit,allocator<TGretinaHit> > */
static int G__TGretinaDict_243_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TGretinaHit,allocator<TGretinaHit> >::reference obj = ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->at((vector<TGretinaHit,allocator<TGretinaHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGretinaHit,allocator<TGretinaHit> >::const_reference obj = ((const vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->at((vector<TGretinaHit,allocator<TGretinaHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGretinaHit,allocator<TGretinaHit> >::iterator* pobj;
         vector<TGretinaHit,allocator<TGretinaHit> >::iterator xobj = ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->begin();
         pobj = new vector<TGretinaHit,allocator<TGretinaHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGretinaHit,allocator<TGretinaHit> >::iterator* pobj;
         vector<TGretinaHit,allocator<TGretinaHit> >::iterator xobj = ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->end();
         pobj = new vector<TGretinaHit,allocator<TGretinaHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGretinaHit,allocator<TGretinaHit> >::reverse_iterator* pobj;
         vector<TGretinaHit,allocator<TGretinaHit> >::reverse_iterator xobj = ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->rbegin();
         pobj = new vector<TGretinaHit,allocator<TGretinaHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGretinaHit,allocator<TGretinaHit> >::reverse_iterator* pobj;
         vector<TGretinaHit,allocator<TGretinaHit> >::reverse_iterator xobj = ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->rend();
         pobj = new vector<TGretinaHit,allocator<TGretinaHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->resize((vector<TGretinaHit,allocator<TGretinaHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->resize((vector<TGretinaHit,allocator<TGretinaHit> >::size_type) G__int(libp->para[0]), *((TGretinaHit*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TGretinaHit,allocator<TGretinaHit> >::reference obj = ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->operator[]((vector<TGretinaHit,allocator<TGretinaHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGretinaHit,allocator<TGretinaHit> >::const_reference obj = ((const vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->operator[]((vector<TGretinaHit,allocator<TGretinaHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TGretinaHit,allocator<TGretinaHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TGretinaHit,allocator<TGretinaHit> >[n];
     } else {
       p = new((void*) gvp) vector<TGretinaHit,allocator<TGretinaHit> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TGretinaHit,allocator<TGretinaHit> >;
     } else {
       p = new((void*) gvp) vector<TGretinaHit,allocator<TGretinaHit> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TGretinaHit,allocator<TGretinaHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TGretinaHit,allocator<TGretinaHit> >((vector<TGretinaHit,allocator<TGretinaHit> >::size_type) G__int(libp->para[0]), *(TGretinaHit*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<TGretinaHit,allocator<TGretinaHit> >((vector<TGretinaHit,allocator<TGretinaHit> >::size_type) G__int(libp->para[0]), *(TGretinaHit*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TGretinaHit,allocator<TGretinaHit> >((vector<TGretinaHit,allocator<TGretinaHit> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<TGretinaHit,allocator<TGretinaHit> >((vector<TGretinaHit,allocator<TGretinaHit> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TGretinaHit,allocator<TGretinaHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TGretinaHit,allocator<TGretinaHit> >(*(vector<TGretinaHit,allocator<TGretinaHit> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<TGretinaHit,allocator<TGretinaHit> >(*(vector<TGretinaHit,allocator<TGretinaHit> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TGretinaHit,allocator<TGretinaHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TGretinaHit,allocator<TGretinaHit> >(*((vector<TGretinaHit,allocator<TGretinaHit> >::const_iterator*) G__int(libp->para[0])), *((vector<TGretinaHit,allocator<TGretinaHit> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<TGretinaHit,allocator<TGretinaHit> >(*((vector<TGretinaHit,allocator<TGretinaHit> >::const_iterator*) G__int(libp->para[0])), *((vector<TGretinaHit,allocator<TGretinaHit> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TGretinaHit,allocator<TGretinaHit> >& obj = ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->operator=(*(vector<TGretinaHit,allocator<TGretinaHit> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->reserve((vector<TGretinaHit,allocator<TGretinaHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TGretinaHit& obj = ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TGretinaHit& obj = ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->push_back(*(TGretinaHit*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->swap(*(vector<TGretinaHit,allocator<TGretinaHit> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGretinaHit,allocator<TGretinaHit> >::iterator* pobj;
         vector<TGretinaHit,allocator<TGretinaHit> >::iterator xobj = ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->insert(*((vector<TGretinaHit,allocator<TGretinaHit> >::iterator*) G__int(libp->para[0])), *(TGretinaHit*) libp->para[1].ref);
         pobj = new vector<TGretinaHit,allocator<TGretinaHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->insert(*((vector<TGretinaHit,allocator<TGretinaHit> >::iterator*) G__int(libp->para[0])), *((vector<TGretinaHit,allocator<TGretinaHit> >::const_iterator*) G__int(libp->para[1]))
, *((vector<TGretinaHit,allocator<TGretinaHit> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->insert(*((vector<TGretinaHit,allocator<TGretinaHit> >::iterator*) G__int(libp->para[0])), (vector<TGretinaHit,allocator<TGretinaHit> >::size_type) G__int(libp->para[1])
, *(TGretinaHit*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->erase(*((vector<TGretinaHit,allocator<TGretinaHit> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->erase(*((vector<TGretinaHit,allocator<TGretinaHit> >::iterator*) G__int(libp->para[0])), *((vector<TGretinaHit,allocator<TGretinaHit> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGretinaDict_243_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGretinaHit,allocator<TGretinaHit> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<TGretinaHit,allocator<TGretinaHit> > G__TvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR;
static int G__TGretinaDict_243_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<TGretinaHit,allocator<TGretinaHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<TGretinaHit,allocator<TGretinaHit> >*) (soff+(sizeof(vector<TGretinaHit,allocator<TGretinaHit> >)*i)))->~G__TvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<TGretinaHit,allocator<TGretinaHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<TGretinaHit,allocator<TGretinaHit> >*) (soff))->~G__TvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TGretinaHit */

/* TGretina */

/* vector<TGretinaHit,allocator<TGretinaHit> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTGretinaDict {
 public:
  G__Sizep2memfuncTGretinaDict(): p(&G__Sizep2memfuncTGretinaDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTGretinaDict::*p)();
};

size_t G__get_sizep2memfuncTGretinaDict()
{
  G__Sizep2memfuncTGretinaDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTGretinaDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit))) {
     TGretinaHit *G__Lderived;
     G__Lderived=(TGretinaHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit),G__get_linked_tagnum(&G__TGretinaDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TGretinaDictLN_TGretina))) {
     TGretina *G__Lderived;
     G__Lderived=(TGretina*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGretinaDictLN_TGretina),G__get_linked_tagnum(&G__TGretinaDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTGretinaDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<G2Segment>",117,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlEG2SegmentcOallocatorlEG2SegmentgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlEG2SegmentcOallocatorlEG2SegmentgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlEG2SegmentcOallocatorlEG2SegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlEG2SegmentcOallocatorlEG2SegmentgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlEG2SegmentcOallocatorlEG2SegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVector3>",117,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Float_t>",117,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TGretinaHit>",117,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit),256,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit),1,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit),257,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TGretinaHit */
static void G__setup_memvarTGretinaHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit));
   { TGretinaHit *p; p=(TGretinaHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fTimeStamp=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWalkCorrection=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCrystalId=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCoreEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCoreCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGretinaDictLN_TVector3),-1,-1,4,"fCorePosition=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCurrentTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFirstInteraction=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSecondInteraction=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"fFirstSegmentValue=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"fSecondSegmentValue=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fSegmentNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR),G__defined_typename("vector<TVector3>"),-1,4,"fInteractionPosition=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,4,"fSegmentEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TGretinaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGretina */
static void G__setup_memvarTGretina(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGretinaDictLN_TGretina));
   { TGretina *p; p=(TGretina*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR),G__defined_typename("vector<TGretinaHit>"),-1,4,"gretina_hits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR),G__defined_typename("vector<TGretinaHit>"),-1,4,"addback_hits=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"crmat[31][4][4][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-2,4,"fCRMATSet=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TGretinaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<TGretinaHit,allocator<TGretinaHit> > */
static void G__setup_memvarvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   { vector<TGretinaHit,allocator<TGretinaHit> > *p; p=(vector<TGretinaHit,allocator<TGretinaHit> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTGretinaDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTGretinaHit(void) {
   /* TGretinaHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit));
   G__memfunc_setup("TGretinaHit",1091,G__TGretinaDict_232_0_1, 105, G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGretinaHit",1091,G__TGretinaDict_232_0_2, 105, G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit), -1, 0, 1, 1, 1, 0, "u 'G2Fragment' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__TGretinaDict_232_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCrystalId",1199,G__TGretinaDict_232_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoreEnergy",1299,G__TGretinaDict_232_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoreCharge",1267,G__TGretinaDict_232_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__TGretinaDict_232_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Size",411,G__TGretinaDict_232_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition",1141,G__TGretinaDict_232_0_10, 117, G__get_linked_tagnum(&G__TGretinaDictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckPosition",1331,G__TGretinaDict_232_0_11, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckAddback",1144,G__TGretinaDict_232_0_12, 103, -1, -1, 0, 1, 1, 1, 0, "u 'TGretinaHit' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__TGretinaDict_232_0_13, 117, G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit), -1, 1, 1, 1, 1, 0, "u 'TGretinaHit' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDoppler",1014,G__TGretinaDict_232_0_14, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - beta U 'TVector3' - 0 '0' vec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TGretinaDict_232_0_15, 85, G__get_linked_tagnum(&G__TGretinaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGretinaHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TGretinaDict_232_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGretinaHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TGretinaDict_232_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGretinaHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TGretinaDict_232_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGretinaHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TGretinaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TGretinaDict_232_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TGretinaDict_232_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGretinaHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TGretinaDict_232_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGretinaHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TGretinaDict_232_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGretinaHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TGretinaDict_232_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGretinaHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGretinaHit", 1091, G__TGretinaDict_232_0_27, (int) ('i'), G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit), -1, 0, 1, 1, 1, 0, "u 'TGretinaHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGretinaHit", 1217, G__TGretinaDict_232_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TGretinaDict_232_0_29, (int) ('u'), G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit), -1, 1, 1, 1, 1, 0, "u 'TGretinaHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGretina(void) {
   /* TGretina */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGretinaDictLN_TGretina));
   G__memfunc_setup("TGretina",798,G__TGretinaDict_241_0_1, 105, G__get_linked_tagnum(&G__TGretinaDictLN_TGretina), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddGretinaHit",1272,G__TGretinaDict_241_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TGretinaHit' - 1 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NumberOfGretinaHits",1920,G__TGretinaDict_241_0_3, 105, -1, -1, 0, 0, 1, 1, 1, "", "GretinaHits.size(); }", (void*) NULL, 0);
   G__memfunc_setup("GetHit",581,G__TGretinaDict_241_0_4, 85, G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit), -1, 0, 1, 1, 1, 0, "i - - 11 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NumberOfAddbackHits",1872,G__TGretinaDict_241_0_5, 105, -1, -1, 0, 0, 1, 1, 1, "", "GretinaHits.size(); }", (void*) NULL, 0);
   G__memfunc_setup("GetAddbackHit",1247,G__TGretinaDict_241_0_6, 85, G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit), -1, 0, 1, 1, 1, 0, "i - - 11 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__TGretinaDict_241_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BuildAddBack",1130,G__TGretinaDict_241_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPosition",1238,G__TGretinaDict_241_0_10, 117, G__get_linked_tagnum(&G__TGretinaDictLN_TVector3), -1, 0, 4, 3, 1, 0, 
"i - - 0 - cryId f - 'Float_t' 0 '0' localX "
"f - 'Float_t' 0 '0' localY f - 'Float_t' 0 '0' localZ", (char*)NULL, (void*) G__func2void( (TVector3 (*)(int, Float_t, Float_t, Float_t))(&TGretina::FindPosition) ), 0);
   G__memfunc_setup("SetCRMAT",675,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 3, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TGretinaDict_241_0_12, 85, G__get_linked_tagnum(&G__TGretinaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGretina::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TGretinaDict_241_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGretina::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TGretinaDict_241_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGretina::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TGretinaDict_241_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGretina::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TGretinaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TGretinaDict_241_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TGretinaDict_241_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGretina::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TGretinaDict_241_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGretina::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TGretinaDict_241_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGretina::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TGretinaDict_241_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGretina::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGretina", 798, G__TGretinaDict_241_0_24, (int) ('i'), G__get_linked_tagnum(&G__TGretinaDictLN_TGretina), -1, 0, 1, 1, 1, 0, "u 'TGretina' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGretina", 924, G__TGretinaDict_241_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TGretinaDict_241_0_26, (int) ('u'), G__get_linked_tagnum(&G__TGretinaDictLN_TGretina), -1, 1, 1, 1, 1, 0, "u 'TGretina' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR(void) {
   /* vector<TGretinaHit,allocator<TGretinaHit> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR));
   G__memfunc_setup("at",213,G__TGretinaDict_243_0_1, 117, G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit), G__defined_typename("vector<TGretinaHit,allocator<TGretinaHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TGretinaHit,allocator<TGretinaHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__TGretinaDict_243_0_2, 117, G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit), G__defined_typename("vector<TGretinaHit,allocator<TGretinaHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TGretinaHit,allocator<TGretinaHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__TGretinaDict_243_0_3, 117, G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__TGretinaDict_243_0_4, 117, G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__TGretinaDict_243_0_5, 117, G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<TGretinaHit,allocator<TGretinaHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__TGretinaDict_243_0_6, 117, G__get_linked_tagnum(&G__TGretinaDictLN_reverse_iteratorlEvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<TGretinaHit,allocator<TGretinaHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__TGretinaDict_243_0_7, 107, -1, G__defined_typename("vector<TGretinaHit,allocator<TGretinaHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__TGretinaDict_243_0_8, 107, -1, G__defined_typename("vector<TGretinaHit,allocator<TGretinaHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TGretinaDict_243_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TGretinaHit,allocator<TGretinaHit> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TGretinaDict_243_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<TGretinaHit,allocator<TGretinaHit> >::size_type' 0 - sz u 'TGretinaHit' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__TGretinaDict_243_0_11, 107, -1, G__defined_typename("vector<TGretinaHit,allocator<TGretinaHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__TGretinaDict_243_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TGretinaDict_243_0_13, 117, G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit), G__defined_typename("vector<TGretinaHit,allocator<TGretinaHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TGretinaHit,allocator<TGretinaHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TGretinaDict_243_0_14, 117, G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit), G__defined_typename("vector<TGretinaHit,allocator<TGretinaHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TGretinaHit,allocator<TGretinaHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TGretinaHit,allocator<TGretinaHit> >",4122,G__TGretinaDict_243_0_15, 105, G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TGretinaHit,allocator<TGretinaHit> >",4122,G__TGretinaDict_243_0_16, 105, G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<TGretinaHit,allocator<TGretinaHit> >::size_type' 0 - n u 'TGretinaHit' - 11 'TGretinaHit()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TGretinaHit,allocator<TGretinaHit> >",4122,G__TGretinaDict_243_0_17, 105, G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<TGretinaHit,allocator<TGretinaHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TGretinaHit,allocator<TGretinaHit> >",4122,G__TGretinaDict_243_0_18, 105, G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<TGretinaHit,allocator<TGretinaHit> >::iterator' 'vector<TGretinaHit,allocator<TGretinaHit> >::const_iterator' 10 - first u 'vector<TGretinaHit,allocator<TGretinaHit> >::iterator' 'vector<TGretinaHit,allocator<TGretinaHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGretinaDict_243_0_19, 117, G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<TGretinaHit,allocator<TGretinaHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__TGretinaDict_243_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TGretinaHit,allocator<TGretinaHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__TGretinaDict_243_0_21, 117, G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__TGretinaDict_243_0_22, 117, G__get_linked_tagnum(&G__TGretinaDictLN_TGretinaHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TGretinaDict_243_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TGretinaHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__TGretinaDict_243_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TGretinaHit,allocator<TGretinaHit> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGretinaDict_243_0_25, 117, G__get_linked_tagnum(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<TGretinaHit,allocator<TGretinaHit> >::iterator' - 0 - position u 'TGretinaHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGretinaDict_243_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TGretinaHit,allocator<TGretinaHit> >::iterator' - 0 - position u 'vector<TGretinaHit,allocator<TGretinaHit> >::iterator' 'vector<TGretinaHit,allocator<TGretinaHit> >::const_iterator' 10 - first "
"u 'vector<TGretinaHit,allocator<TGretinaHit> >::iterator' 'vector<TGretinaHit,allocator<TGretinaHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGretinaDict_243_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TGretinaHit,allocator<TGretinaHit> >::iterator' - 0 - position k - 'vector<TGretinaHit,allocator<TGretinaHit> >::size_type' 0 - n "
"u 'TGretinaHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__TGretinaDict_243_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TGretinaDict_243_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TGretinaHit,allocator<TGretinaHit> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TGretinaDict_243_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<TGretinaHit,allocator<TGretinaHit> >::iterator' - 0 - first u 'vector<TGretinaHit,allocator<TGretinaHit> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TGretinaDict_243_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<TGretinaHit,allocator<TGretinaHit> >", 4248, G__TGretinaDict_243_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTGretinaDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTGretinaDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTGretinaDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TGretinaDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_G2Fragment = { "G2Fragment" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_vectorlEG2SegmentcOallocatorlEG2SegmentgRsPgR = { "vector<G2Segment,allocator<G2Segment> >" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_reverse_iteratorlEvectorlEG2SegmentcOallocatorlEG2SegmentgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<G2Segment,allocator<G2Segment> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TGretinaHit = { "TGretinaHit" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR = { "vector<TVector3,allocator<TVector3> >" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVector3,allocator<TVector3> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_TGretina = { "TGretina" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR = { "vector<TGretinaHit,allocator<TGretinaHit> >" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiterator = { "vector<TGretinaHit,allocator<TGretinaHit> >::iterator" , 99 , -1 };
G__linked_taginfo G__TGretinaDictLN_reverse_iteratorlEvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TGretinaHit,allocator<TGretinaHit> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTGretinaDict() {
  G__TGretinaDictLN_TClass.tagnum = -1 ;
  G__TGretinaDictLN_TBuffer.tagnum = -1 ;
  G__TGretinaDictLN_TMemberInspector.tagnum = -1 ;
  G__TGretinaDictLN_TObject.tagnum = -1 ;
  G__TGretinaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__TGretinaDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TGretinaDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TGretinaDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TGretinaDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TGretinaDictLN_G2Fragment.tagnum = -1 ;
  G__TGretinaDictLN_vectorlEG2SegmentcOallocatorlEG2SegmentgRsPgR.tagnum = -1 ;
  G__TGretinaDictLN_reverse_iteratorlEvectorlEG2SegmentcOallocatorlEG2SegmentgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__TGretinaDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__TGretinaDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__TGretinaDictLN_TVector3.tagnum = -1 ;
  G__TGretinaDictLN_TGretinaHit.tagnum = -1 ;
  G__TGretinaDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__TGretinaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TGretinaDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR.tagnum = -1 ;
  G__TGretinaDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TGretinaDictLN_TGretina.tagnum = -1 ;
  G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR.tagnum = -1 ;
  G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiterator.tagnum = -1 ;
  G__TGretinaDictLN_reverse_iteratorlEvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTGretinaDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_G2Fragment);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_vectorlEG2SegmentcOallocatorlEG2SegmentgRsPgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_reverse_iteratorlEvectorlEG2SegmentcOallocatorlEG2SegmentgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TVector3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TGretinaHit),sizeof(TGretinaHit),-1,324864,(char*)NULL,G__setup_memvarTGretinaHit,G__setup_memfuncTGretinaHit);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TGretinaDictLN_TGretina),sizeof(TGretina),-1,292096,(char*)NULL,G__setup_memvarTGretina,G__setup_memfuncTGretina);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR),sizeof(vector<TGretinaHit,allocator<TGretinaHit> >),-1,298752,(char*)NULL,G__setup_memvarvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR,G__setup_memfuncvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_vectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TGretinaDictLN_reverse_iteratorlEvectorlETGretinaHitcOallocatorlETGretinaHitgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupTGretinaDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTGretinaDict()");
  G__set_cpp_environmentTGretinaDict();
  G__cpp_setup_tagtableTGretinaDict();

  G__cpp_setup_inheritanceTGretinaDict();

  G__cpp_setup_typetableTGretinaDict();

  G__cpp_setup_memvarTGretinaDict();

  G__cpp_setup_memfuncTGretinaDict();
  G__cpp_setup_globalTGretinaDict();
  G__cpp_setup_funcTGretinaDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTGretinaDict();
  return;
}
class G__cpp_setup_initTGretinaDict {
  public:
    G__cpp_setup_initTGretinaDict() { G__add_setup_func("TGretinaDict",(G__incsetup)(&G__cpp_setupTGretinaDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTGretinaDict() { G__remove_setup_func("TGretinaDict"); }
};
G__cpp_setup_initTGretinaDict G__cpp_setup_initializerTGretinaDict;

