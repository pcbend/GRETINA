#!/usr/bin/env bash 

readlink=readlink
if [ `uname` = "AIX" ]; then
  readlink=echo
fi

# work around readlink versions not having -f option
fullpath1=`$readlink $0`
if [ "$?" -ne "0" ]; then
  fullpath1=$0
else
  if [ ${fullpath1##/} = $fullpath1 ] && [ ${fullpath1##~} = $fullpath1 ]; then
    # relative path, prepend directory where executable was found
    lpath=`dirname $0`
    fullpath1=$lpath/$fullpath1
  fi
fi

progdir=`dirname $fullpath1`
runningdir=`pwd`
if [ ${progdir##/} != $progdir ] || [ ${progdir##~} != $progdir ]; then
  # absolute path
  fullpath=$progdir
else
  # relative path
  if [ $progdir != "." ]; then
    fullpath=$runningdir/$progdir
  else
    fullpath=$runningdir
  fi
fi

# work around readlink versions not having -f option
fullpath1=`$readlink $fullpath`
if [ "$?" -ne "0" ]; then
  fullpath1=$fullpath
fi


bindir=$GEBSYS/bin
libdir=$GEBSYS/libraries
incdir=$GEBSYS/include
utildir=$GEBSYS/etc


grutlibs="-lGEBFormat -lNucleus -lKinematics -lGROOT"
detlibs="-lGretina -lPhosWall -lLaBr "
grutmore="-lGRUTint"

cflags="-std=c++0x -I$incdir"



usage="\
Usage: grut-config [--version] [--cflags] [--libs] [--all-libs] [--help]"

if test $# -eq 0; then
  echo "${usage}" 1>&2
  exit 1
fi

out=""

cflagsout=no
libsout=no
alllibsout=no
rootout=no

while test $# -gt 0; do
  case "$1" in 
  -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
  *)    optarg= ;;
  esac

  case $1 in
    --version)
      ### Output the version number.  If GRUTVersion.h can not be found, give up.
      if test -r ${incdir}/GRUTVersion.h; then
        out="$out GRUT_RELEASE: `sed -n 's,.*GRUT_RELEASE *\"\(.*\)\".*,\1,p' < ${incdir}/RVersion.h`"
      else
        echo "cannot read ${incdir}/RVersion.h"
        exit 1
      fi
      ;;
    --cflags)
      if test "x$cflagsout" = "xyes" ; then
        shift
        continue
      fi
      cflagsout="yes"
      out="$out $cflags "
      ;;
    --libs)
      if test "x$libsout" = "xyes" ; then
        shift
        continue
      fi
      libsout="yes"
      if test "x$alllibsout" = "xyes" ; then
        shift
        continue
      fi
      out=$"$out -L${libdir} $grutlibs $detlibs "
      ;;
    --all-libs)
      if test "x$alllibsout" = "xyes" ; then
        shift
        continue
      fi
      alllibsout="yes"
      if test "x$libsout" = "xyes" ; then
        out=$"$out $grutmore "
      else
        out=$"$out -L${libdir} $grutlibs $detlibs $grutmore "
      fi
      ;;
    --root)
      if test "x$rootout" = "xyes" ; then
        shift
        continue
      fi
      rootout="yes"
      out="$out `root-config --cflags --libs` -lPhysics -lSpectrum"
      ;;
    --help)
      ### Print a helpful message...
      echo "Usage: `basname$0` [options]"
      echo ""
      echo "  --version       Print the current GRUT Version number."
      echo "  --cflags        Print compiler flags and header path."
      echo "  --libs          Print libdir + most used GRUT libraries ."
      echo "  --all-libs      Print libdir + all GRUT libraries ."
      echo "  --root          Print root-config output need for most grut compulations."
      echo "  --help          Print what you see here."
      exit 0
      ;;
    *)
      ### Give an error
      echo "Unknown argument \"$1\"!" 1>&2
      echo "${usage}" 1>&2
      exit 1
      ;;
   esac
   shift 
done

echo $out

